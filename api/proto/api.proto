syntax = "proto3";
package api;

service GameData {
    rpc GetGameServerStartupData (Message) returns (Message);
    rpc LogInCaracter (Message) returns (Message);
    rpc UpdateCaracter (Message) returns (Message);
    rpc CreateItemInstance (CreateItemInstanceRequest) returns (Message);
}

service Administration {
    rpc CreateAccessToken (CreateAccessTokenRequest) returns (CreateAccessTokenReply);
    rpc VerifyAccessToken (VerifyAccessTokenRequest) returns (AccessToken);
    rpc GetAccessTokens (GetAccessTokensRequest) returns (GetAccessTokensReply);
    rpc DeleteAccessToken (ByIdRequest) returns (Message);

    rpc GetUser (GetUserRequest) returns (User);
    rpc GetUsers (GetUsersRequest) returns (GetUsersReply);
    rpc UpdateUser (UpdateUserRequest) returns (User);
    rpc LogOutUser (ByIdRequest) returns (Message);
    rpc ResetUserRecoveryCode(ByIdRequest) returns (ResetUserRecoveryCodeReply);

    // TODO Server and World management
}

service Users {
    rpc SignUp (Message) returns (Message);
    rpc LogIn (Message) returns (Message);
    rpc LogOut (Message) returns (Message);
    rpc DeleteUser (Message) returns (Message);
    rpc UpdateUsername (Message) returns (Message);
    rpc UpdatePassword (Message) returns (Message);
    rpc VerifyRecoveryCode (Message) returns (Message);
    rpc RecoverUser (Message) returns (Message);
    
    rpc CreateCharacter (CreateCharacterRequest) returns (Character);
    rpc GetCharacter (Message) returns (Message);
    rpc GetCharacters (Message) returns (Message);
    rpc DeleteCharacter (Message) returns (Message);
}

// GameData Service
message CreateItemInstanceRequest {
   string name = 1;
   int64 character_id = 2;
   int64 item_id = 3;
   int64 quantity = 4;
   ItemInstanceLocation location = 5;
   bool in_collection = 6;
   string instance_data = 7;
}

enum ItemInstanceLocation {
    Other = 0;
    Dropped = 1;
    NpcMerchant = 2;
    Market = 3;
    Inventory = 4;
    Equipped = 5;
    InventoryContainer = 6;
    ClassCrystal = 7;
    Box = 8;
}
// End GameData Service

// Administration Service
message CreateAccessTokenRequest {
    AccessLevel access_level = 1;
    optional string game_server_id = 2;
    optional int64 lifetime_seconds = 3;
}

message CreateAccessTokenReply {
    string access_token = 1;
    AccessToken access_token_data = 2;
}

message GetAccessTokensRequest {
    optional int32 page_size = 1;
    optional int32 page = 2;
    optional string access_token = 3;
    optional bool can_expire = 4;
}

message GetAccessTokensReply {
    int32 page = 1;
    int32 page_count = 2;
    repeated AccessToken access_token_data_list = 3;
}

message VerifyAccessTokenRequest {
    string access_token = 1;
}

message GetUserRequest {
    oneof ref {
        int64 id = 1;
        string username = 2;
    }
}

message GetUsersRequest {
    optional int32 page_size = 1;
    optional int32 page = 2;
    optional Role role = 3;
}

message GetUsersReply {
    int32 page = 1;
    int32 page_count = 2;
    repeated User user_list = 3;
}

message UpdateUserRequest {
    int64 id = 1;
    optional string username = 3;
    optional Role role = 4;
}

message ResetUserRecoveryCodeReply {
    string recovery_code = 1;
}
// End Administration Service

// User Service
message CreateCharacterRequest {
   oneof user_ref {
    int64 id = 1;
    string username = 2;
   }
   string home_world_id = 3;
   optional Role role = 4;
   optional string name = 5;
}
// End User Service

// Shared
message Message {
    string message = 1;
}

message ByIdRequest {
    int64 id = 1;
}

message ByStringIdRequest {
    string id = 1;
}

message User {
    int64 id = 1;
    int64 updated_at = 2;
    string username = 3;
    Role role = 4;
}

enum Role {
    NewPlayer = 0;
    Player = 1;
    MembershipPlayer = 2;
    GameModerator = 3;
    GameAdministrator = 4;
}

message AccessToken {
    int64 id = 1;
    AccessLevel access_level = 2;
    optional string game_server_id = 3;
    optional int64 expires_at = 4;
}

enum AccessLevel {
    Default = 0;
    GameServer = 1;
    Administrator = 2;
}

message Character {
    int64 id = 1;
    int64 updated_at = 2;
    string name = 3;
    Role role = 4;
    string home_world_id = 5;
    int64 user_id = 6;
    Ancestry ancestry = 7;
    Gender gender = 8;
    string customization = 9; // JSON
    string data = 10; // JSON
}

enum Ancestry {
    Cat = 0;
    Human = 1;
}

enum Gender {
    Neutral = 0;
    Feminine = 1;
    Masculine = 2;
    None = 3;
    Fluid = 4;
    Advanced = 5;
}
// End Shared